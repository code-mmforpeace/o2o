package com.ouver.o2o.service.impl;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ouver.o2o.dao.HeadLineDao;
import com.ouver.o2o.domain.HeadLine;
import com.ouver.o2o.exceptions.HeadLineOperationException;
import com.ouver.o2o.redis.RedisUtils;
import com.ouver.o2o.service.HeadLineService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class HeadLineServiceImpl implements HeadLineService {

    @Autowired
    private HeadLineDao headLineDao;
    @Autowired
    private RedisUtils.Keys keys;
    @Autowired
    private RedisUtils.strings strings;

    private static Logger logger = LoggerFactory.getLogger(HeadLineServiceImpl.class);

    @Override
    @Transactional
    public List<HeadLine> queryHeadLineList(HeadLine headLineCondition) {
        //定义key
        String key = KEY;
        //定义接收对象
        List<HeadLine> headLineList = null;
        //定义jackson数据转换操作类
        ObjectMapper objectMapper = new ObjectMapper();
        //拼接key，可用和不可用
        if(headLineCondition != null && headLineCondition.getEnableStatus() != null){
            key = key+"_"+headLineCondition.getEnableStatus();
        }
        //进行判断
        if(!keys.exists(key)){
            //如果不存在，则表示是第一次缓存
            //那么就先由数据库查询返回结果，结果存入redis
            headLineList = headLineDao.queryHeadLineList(headLineCondition);
            //将相关结果集转换成string，存入redis
            String jsonString;
            try {
                jsonString = objectMapper.writeValueAsString(headLineList);
            } catch (JsonProcessingException e) {
                e.printStackTrace();
                logger.error(e.getMessage());
                throw new HeadLineOperationException(e.getMessage());
            }
            strings.set(key,jsonString);
        }else {
            //如果存在，直接将redis存储的转换回去返回
            String s = strings.get(key);
            //将string类型转换为对应的集合类型
            JavaType javaType = objectMapper.getTypeFactory().constructParametricType(ArrayList.class, HeadLine.class);

            try {
                headLineList = objectMapper.readValue(s,javaType);
            } catch (IOException e) {
                e.printStackTrace();
                logger.error(e.getMessage());
                throw new HeadLineOperationException(e.getMessage());
            }
        }
        return headLineList;
    }
}
